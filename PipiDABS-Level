#! /usr/bin/env Rscript
##############################################################################################################################################################################################
## PipiDABS: A Comprehensive and User-Friendly Pipeline for Downstream DNA Methylation Analysis of High-throughput Bisulfite Sequencing Data.                           
## Run "PipiDABS -h" to get some help.
## Author: Yong Peng, yongp@outlook.com
##############################################################################################################################################################################################





## Part 1: Get arguments, system informations, versions of packages, etc ...
##############################################################################################################################################################################################
rm( list=ls() )    # remove all the objects from the R session
PathOfPipiDABS_g          = system(command = "which PipiDABS",  intern = TRUE) 
PathOfPipiDABS_g          = gsub(pattern="/PipiDABS$", replacement="", x=PathOfPipiDABS_g, ignore.case = FALSE, perl = TRUE)                                              
AbsolutePathOfFunctions_g = paste(PathOfPipiDABS_g, "functions", sep="/")
source( paste(AbsolutePathOfFunctions_g,   "1_Get-Parameters.R",    sep="/") )  

myRunLog_g = paste(outDir_g, "Running_Log",              sep="/"  )
Part1_g    = paste(outDir_g, "1_Get_Options_Versions",   sep="/"  ) 
if( ! file.exists(outDir_g)   ) { dir.create(outDir_g,   recursive = TRUE) }
if( ! file.exists(myRunLog_g) ) { dir.create(myRunLog_g, recursive = TRUE) }
if( ! file.exists(Part1_g)    ) { dir.create(Part1_g,    recursive = TRUE) }
cat("\nStart Part 1: \n")
cat("    Get arguments, system informations, versions of packages, etc ... \n")

sink(file = paste(myRunLog_g, "Part_1.runLog.txt", sep="/") )
source( paste(AbsolutePathOfFunctions_g,   "2_Load-All-Packages.R",   sep="/") )  
cat("\n All required packages are loaded correctly. \n")
sink( paste(Part1_g,  "/1_Parameters.txt",  sep = "") )
    print( paste("samplesInformation_g"      , samplesInformation_g,      sep=":  ") )
    print( paste("colorShape_g"              , colorShape_g,              sep=":  ") )
    print( paste("outDir_g"                  , outDir_g,                  sep=":  ") )
    print( paste("lowestCoverage_g"          , lowestCoverage_g,          sep=":  ") )
    print( paste("numberCoveredSamples_g"    , numberCoveredSamples_g,    sep=":  ") )
    print( paste("refGenome_g"               , refGenome_g,               sep=":  ") )
    print( paste("cytosineContext_g"         , cytosineContext_g,         sep=":  ") )
    print( paste("qvalue_g"                  , qvalue_g,                  sep=":  ") )
    print( paste("differenceOfMethylation_g" , differenceOfMethylation_g, sep=":  ") )
    print( paste("windowSize_g"              , windowSize_g,              sep=":  ") )
    print( paste("stepSize_g"                , stepSize_g,                sep=":  ") )
    print( paste("minBases_g"                , minBases_g,                sep=":  ") )
    print( paste("specificRegions_g"         , specificRegions_g,         sep=":  ") )
    print( paste("minBasesSpecificRegions_g" , minBasesSpecificRegions_g, sep=":  ") )
    print( paste("topPercentageCoverage_g"   , topPercentageCoverage_g,   sep=":  ") )
    print( paste("normalize_g"               , normalize_g,               sep=":  ") )
    print("#############################")
    print( paste("PathOfPipiDABS_g"          , PathOfPipiDABS_g,          sep=":  ") )
    print( paste("AbsolutePathOfFunctions_g" , AbsolutePathOfFunctions_g, sep=":  ") )  
sink()
sink( paste(Part1_g,  "/2_Versions-All.txt",  sep = "") )
    print( sessionInfo() ) 
sink()
sink( paste(Part1_g,  "/3_Versions-Selected.txt",  sep = "") )
    print( paste("ggplot2",    packageVersion("ggplot2"),    sep=":  " ) ) 
    print( paste("genomation", packageVersion("genomation"), sep=":  " ) )
    print( paste("methylKit",  packageVersion("methylKit"),  sep=":  " ) )
    print( paste("DSS",        packageVersion("DSS"),        sep=":  " ) )  
sink()
sink( paste(Part1_g,  "/4_Date-Time.txt",  sep = "") )
     print( Sys.time() )
     print( Sys.Date() )
sink()
sink()
cat("End Part 1. \n\n\n\n\n")
##############################################################################################################################################################################################





## Part 2: Get the input files and some specific regions ...
##############################################################################################################################################################################################
cat("\nStart Part 2: \n")
cat("    Get the input files and some specific regions ... \n")

sink(file = paste(myRunLog_g, "Part_2.runLog.txt",  sep="/") )
Part2_g   = paste(outDir_g,   "2_Get_Input_Files",  sep="/") 
if( ! file.exists(Part2_g) )    { dir.create(Part2_g,    recursive = TRUE) }
source( paste(AbsolutePathOfFunctions_g, "3_Get-Input-Files.R", sep="/") )  
source( paste(AbsolutePathOfFunctions_g, "4_Get-Specific-Regions.R", sep="/") )  
if(specificRegions_g == "NA_NoGenomicRegions" ) {
    cat("\n\n No folder/path is specified for bed files with some specific genomic regions. \n\n\n")
}else{
	sink( paste(Part2_g,  "/6_Specific-Loci-Files.txt",  sep = "") )
    		print( mySpecificLoci_1_g  )
    		print( mySpecificLoci_2_g  )
    		print( mySpecificLoci_3_g  )
    		print( mySpecificLoci_4_g  )
    		print( mySpecificLoci_5_g  )
    		print( mySpecificLoci_6_g  )
    		print( mySpecificLoci_7_g  )
    		print( mySpecificLoci_8_g  )
    		print( mySpecificLoci_9_g  )
    		print( mySpecificLoci_10_g )
    		print( mySpecificLoci_11_g )
    		print( mySpecificLoci_12_g )
    		print( mySpecificLoci_13_g )
    		print( mySpecificLoci_14_g )
    		print( mySpecificLoci_15_g )
    		print( mySpecificLoci_16_g )
    		print( mySpecificLoci_17_g )
    		print( mySpecificLoci_18_g )
    		print( mySpecificLoci_19_g )
    		print( mySpecificLoci_20_g )  
    		print( mySpecificLoci_21_g )
    		print( mySpecificLoci_22_g )
    		print( mySpecificLoci_23_g )
    		print( mySpecificLoci_24_g )
    		print( mySpecificLoci_25_g )
    		print( mySpecificLoci_26_g )
    		print( mySpecificLoci_27_g )
    		print( mySpecificLoci_28_g )
    		print( mySpecificLoci_29_g )
    		print( mySpecificLoci_30_g ) 
	sink()
	sink( paste(Part2_g,  "/7_Specific-Loci-Processed.txt",  sep = "") )
    		print( mySpecificLoci_1.obj_g  )  
    		print( mySpecificLoci_2.obj_g  )
    		print( mySpecificLoci_3.obj_g  )
    		print( mySpecificLoci_4.obj_g  )
    		print( mySpecificLoci_5.obj_g  )
    		print( mySpecificLoci_6.obj_g  )
    		print( mySpecificLoci_7.obj_g  )
    		print( mySpecificLoci_8.obj_g  )
    		print( mySpecificLoci_9.obj_g  )
    		print( mySpecificLoci_10.obj_g )
    		print( mySpecificLoci_11.obj_g )
    		print( mySpecificLoci_12.obj_g )
   		print( mySpecificLoci_13.obj_g )
    		print( mySpecificLoci_14.obj_g )
    		print( mySpecificLoci_15.obj_g )
    		print( mySpecificLoci_16.obj_g )
    		print( mySpecificLoci_17.obj_g )
    		print( mySpecificLoci_18.obj_g )
    		print( mySpecificLoci_19.obj_g )
    		print( mySpecificLoci_20.obj_g )  
    		print( mySpecificLoci_21.obj_g )
    		print( mySpecificLoci_22.obj_g )
   		print( mySpecificLoci_23.obj_g )
    		print( mySpecificLoci_24.obj_g )
    		print( mySpecificLoci_25.obj_g )
    		print( mySpecificLoci_26.obj_g )
    		print( mySpecificLoci_27.obj_g )
    		print( mySpecificLoci_28.obj_g )
    		print( mySpecificLoci_29.obj_g )
    		print( mySpecificLoci_30.obj_g )  
	sink()
	sink( paste(Part2_g,  "/8_NumberRows-of-Specific-Loci-Files.txt",  sep = "") )
                if( ! is.na(mySpecificLoci_1_g)  ) {print( paste(mySpecificLoci_1_g,  dim( as.data.frame(mySpecificLoci_1.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_2_g)  ) {print( paste(mySpecificLoci_2_g,  dim( as.data.frame(mySpecificLoci_2.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_3_g)  ) {print( paste(mySpecificLoci_3_g,  dim( as.data.frame(mySpecificLoci_3.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_4_g)  ) {print( paste(mySpecificLoci_4_g,  dim( as.data.frame(mySpecificLoci_4.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_5_g)  ) {print( paste(mySpecificLoci_5_g,  dim( as.data.frame(mySpecificLoci_5.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_6_g)  ) {print( paste(mySpecificLoci_6_g,  dim( as.data.frame(mySpecificLoci_6.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_7_g)  ) {print( paste(mySpecificLoci_7_g,  dim( as.data.frame(mySpecificLoci_7.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_8_g)  ) {print( paste(mySpecificLoci_8_g,  dim( as.data.frame(mySpecificLoci_8.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_9_g)  ) {print( paste(mySpecificLoci_9_g,  dim( as.data.frame(mySpecificLoci_9.obj_g$targets) ),    sep=":  ") )  }
                if( ! is.na(mySpecificLoci_10_g) ) {print( paste(mySpecificLoci_10_g, dim( as.data.frame(mySpecificLoci_10.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_11_g) ) {print( paste(mySpecificLoci_11_g, dim( as.data.frame(mySpecificLoci_11.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_12_g) ) {print( paste(mySpecificLoci_12_g, dim( as.data.frame(mySpecificLoci_12.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_13_g) ) {print( paste(mySpecificLoci_13_g, dim( as.data.frame(mySpecificLoci_13.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_14_g) ) {print( paste(mySpecificLoci_14_g, dim( as.data.frame(mySpecificLoci_14.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_15_g) ) {print( paste(mySpecificLoci_15_g, dim( as.data.frame(mySpecificLoci_15.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_16_g) ) {print( paste(mySpecificLoci_16_g, dim( as.data.frame(mySpecificLoci_16.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_17_g) ) {print( paste(mySpecificLoci_17_g, dim( as.data.frame(mySpecificLoci_17.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_18_g) ) {print( paste(mySpecificLoci_18_g, dim( as.data.frame(mySpecificLoci_18.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_19_g) ) {print( paste(mySpecificLoci_19_g, dim( as.data.frame(mySpecificLoci_19.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_20_g) ) {print( paste(mySpecificLoci_20_g, dim( as.data.frame(mySpecificLoci_20.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_21_g) ) {print( paste(mySpecificLoci_21_g, dim( as.data.frame(mySpecificLoci_21.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_22_g) ) {print( paste(mySpecificLoci_22_g, dim( as.data.frame(mySpecificLoci_22.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_23_g) ) {print( paste(mySpecificLoci_23_g, dim( as.data.frame(mySpecificLoci_23.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_24_g) ) {print( paste(mySpecificLoci_24_g, dim( as.data.frame(mySpecificLoci_24.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_25_g) ) {print( paste(mySpecificLoci_25_g, dim( as.data.frame(mySpecificLoci_25.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_26_g) ) {print( paste(mySpecificLoci_26_g, dim( as.data.frame(mySpecificLoci_26.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_27_g) ) {print( paste(mySpecificLoci_27_g, dim( as.data.frame(mySpecificLoci_27.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_28_g) ) {print( paste(mySpecificLoci_28_g, dim( as.data.frame(mySpecificLoci_28.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_29_g) ) {print( paste(mySpecificLoci_29_g, dim( as.data.frame(mySpecificLoci_29.obj_g$targets) ),   sep=":  ") )  }
                if( ! is.na(mySpecificLoci_30_g) ) {print( paste(mySpecificLoci_30_g, dim( as.data.frame(mySpecificLoci_30.obj_g$targets) ),   sep=":  ") )  }  
	sink()
}
sink() 
cat("End Part 2. \n\n\n\n\n")
##############################################################################################################################################################################################





## Part 3: Read the raw files ...
##############################################################################################################################################################################################
suppressPackageStartupMessages( library(methylKit)  ) 
cat("Start Part 3: \n")
cat("    Read the raw files ... \n")

sink(file = paste(myRunLog_g, "Part_3.runLog.txt", sep="/") )   
Part3_g = paste(outDir_g, "/3_Read_Raw_Files",  sep="") 
if( ! file.exists(Part3_g) )    { dir.create(Part3_g,    recursive = TRUE) }

sink( file=paste(Part3_g, "1_Log-of-read-input-files.txt", sep="/") )  
myobj_g = methylKit::methRead(location   = Files_All_list_g, 
                   sample.id  = SampleID_All_list_g, 
                   assembly   = refGenome_g, 
                   pipeline   = "bismarkCoverage",
                   header     = FALSE, 
                   sep        = "\t", 
                   context    = cytosineContext_g,
                   resolution = "base",  ## allowed values 'base' or 'region'.
                   treatment  = Treatment_All_vector_g, 
                   mincov     = lowestCoverage_g
)
sink()

sink( file=paste(Part3_g, "2_All-raw-files.txt", sep="/") )
    print(myobj_g)
sink()

sink( file=paste(Part3_g, "3_Dimensions-of-each-file.txt", sep="/")  )
for( i in c(1:length(Files_All_vector_g)) ) {
  print( "######################" )
  print(   Files_All_vector_g[i]  )
  print(   dim(myobj_g[[i]])  )
  cat("\n\n")
}
sink()

sink( file=paste(Part3_g, "4_Dimensions-of-each-file-formatted.txt", sep="/")  )
for( i in c(1:length(Files_All_vector_g)) ) {
  cat(   dim(myobj_g[[i]])[1], "\t", dim(myobj_g[[i]])[2], "\t", Files_All_vector_g[i], "\n"  )    
}
sink()

sink( file=paste(Part3_g, "5_Check-each-file.txt", sep="/")  )
for( i in c(1:length(Files_All_vector_g)) ) {
  temp_matrix1 <- read.table(file = Files_All_vector_g[i], header = FALSE, sep = "\t" )
  temp_matrix1_cov = rowSums(temp_matrix1[,c(5,6)])
  temp_matrix1 = temp_matrix1[temp_matrix1_cov>=lowestCoverage_g, ]
  temp_matrix2 <- methylKit::getData(myobj_g[[i]])
  myNumCs_1 = temp_matrix1[,5]   
  myNumTs_1 = temp_matrix1[,6]  
  myNumCs_2 = temp_matrix2[,6]  
  myNumTs_2 = temp_matrix2[,7]  
  if( identical(myNumCs_1,myNumCs_2) & identical(myNumTs_1,myNumTs_2) ) {
    cat("Yes\n")
  }else{
    cat(" ##Wrong## ",  ShortName_All_vector_g[i], "\n" )
    stop(ShortName_All_vector_g[i])
  }
}
sink()

## remove potential PCR duplicates.
myPercentageTop_g = as.numeric(100 - topPercentageCoverage_g)
kept.myobj_g = methylKit::filterByCoverage( myobj_g,  lo.count = lowestCoverage_g,  lo.perc = NULL,  hi.count = NULL,  hi.perc = myPercentageTop_g,  chunk.size = 1e+07,  save.db = FALSE )      
sink( file=paste(Part3_g, "6_Dimensions-of-each-sample.kept.txt", sep="/")  )
for( i in c(1:length(Files_All_vector_g)) ) {
  cat(   dim(kept.myobj_g[[i]])[1], "\t", dim(kept.myobj_g[[i]])[2], "\t", ShortName_All_vector_g[i], "\n"  )    
}
sink()

######## only for the removed C sites.
removed.myobj_g1 = methylKit::filterByCoverage( myobj_g,  lo.count = NULL,  lo.perc = myPercentageTop_g,  hi.count = NULL,  
                                     hi.perc = NULL,  chunk.size = 1e+07,  save.db = FALSE )
Part3_g2 = paste(Part3_g, "/removed_C_sites",  sep="") 
if( ! file.exists(Part3_g2) ) { dir.create(Part3_g2, recursive = TRUE) }
for( i in c(1:length(Files_All_vector_g)) ) {
  file_name = ShortName_All_vector_g[i]   
  write.table(methylKit::getData(removed.myobj_g1[[i]])  ,  file = paste(Part3_g2,   file_name,  sep="/"), 
              append = FALSE, quote = FALSE, sep = "\t", eol = "\n", na = "NA", dec = ".", 
              row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"),  fileEncoding = "")
}
sink( file=paste(Part3_g, "7A_Dimensions-of-each-sample.removed.txt", sep="/")  )
for( i in c(1:length(Files_All_vector_g)) ) {
  cat(   dim(removed.myobj_g1[[i]])[1], "\t", dim(removed.myobj_g1[[i]])[2], "\t", ShortName_All_vector_g[i], "\n"  )    
}
sink()
sink( file=paste(Part3_g, "7B_Coverage-distribution-of-each-sample.removed.txt", sep="/")  )
cat(   "min", "\t", "mean", "\t",  "median", "\t",  "max", "\t", "sample", "\n"  )    
for( i in c(1:length(Files_All_vector_g)) ) {
  myTempCov1 = methylKit::getData( removed.myobj_g1[[i]] )[,5]
  cat(   min(myTempCov1), "\t", mean(myTempCov1), "\t",  median(myTempCov1), "\t",  max(myTempCov1), "\t", ShortName_All_vector_g[i], "\n"  )    
}
sink()
########end

sink( file=paste(Part3_g, "8A_Dimensions-of-each-sample.keptCsites.txt", sep="/")  )
for( i in c(1:length(Files_All_vector_g)) ) {
  cat(   dim(kept.myobj_g[[i]])[1], "\t", dim(kept.myobj_g[[i]])[2], "\t", ShortName_All_vector_g[i], "\n"  )    
}
sink()

sink( file=paste(Part3_g, "8B_Coverage-distribution-of-each-sample.keptCsites.txt", sep="/")  )
cat(   "min", "\t", "mean", "\t",  "median", "\t",  "max", "\t", "sample", "\n"  )    
for( i in c(1:length(Files_All_vector_g)) ) {
  myTempCov1 = methylKit::getData( kept.myobj_g[[i]] )[,5]
  cat(   min(myTempCov1), "\t", mean(myTempCov1), "\t",  median(myTempCov1), "\t",  max(myTempCov1), "\t", ShortName_All_vector_g[i], "\n"  )    
}
sink()


sink( file=paste(Part3_g, "9A_Dimensions-of-each-sample.raw.txt", sep="/")  )
for( i in c(1:length(Files_All_vector_g)) ) {
  cat(   dim(myobj_g[[i]])[1], "\t", dim(myobj_g[[i]])[2], "\t", ShortName_All_vector_g[i], "\n"  )    
}
sink()

sink( file=paste(Part3_g, "9B_Coverage-distribution-of-each-sample.raw.txt", sep="/")  )
cat(   "min", "\t", "mean", "\t",  "median", "\t",  "max", "\t", "sample", "\n"  )    
for( i in c(1:length(Files_All_vector_g)) ) {
  myTempCov1 = methylKit::getData( myobj_g[[i]] )[,5]
  cat(   min(myTempCov1), "\t", mean(myTempCov1), "\t",  median(myTempCov1), "\t",  max(myTempCov1), "\t", ShortName_All_vector_g[i], "\n"  )    
}
sink()

sink( file=paste(Part3_g, "10_Dimensions-all.txt", sep="/")  )
cat("Raw",  "Kept",   "Removed",  "Files", "\n", sep="\t")
for( i in c(1:length(Files_All_vector_g)) ) {
  cat(    dim(myobj_g[[i]])[1],   dim(kept.myobj_g[[i]])[1],   dim(removed.myobj_g1[[i]])[1] ,   ShortName_All_vector_g[i], "\n" , sep="\t" )    
}
sink()

pdf( file=paste(Part3_g, "11_Methylation-Level-distribution.all-kept-removed.pdf", sep="/")  )
par(mfrow=c(2,3))
for( i in c(1:length(myobj_g)) ) {
  methylKit::getMethylationStats(myobj_g[[i]],          plot=TRUE, both.strands=FALSE )
  methylKit::getMethylationStats(kept.myobj_g[[i]],     plot=TRUE, both.strands=FALSE )
  methylKit::getMethylationStats(removed.myobj_g1[[i]], plot=TRUE, both.strands=FALSE )
}
dev.off()

pdf( file=paste(Part3_g, "12_Coverage-distribution.pdf", sep="/")  )
par(mfrow=c(2,3))
for( i in c(1:length(myobj_g)) ) {
  methylKit::getCoverageStats(myobj_g[[i]],          plot=TRUE, both.strands=FALSE )
  methylKit::getCoverageStats(kept.myobj_g[[i]],     plot=TRUE, both.strands=FALSE )
  methylKit::getCoverageStats(removed.myobj_g1[[i]], plot=TRUE, both.strands=FALSE )

}
dev.off()

##### How to normalize the raw data.
myobj_nor_g <- kept.myobj_g
bool_normalize = 0
if(normalize_g == "none")   { myobj_nor_g <- kept.myobj_g; bool_normalize=bool_normalize+1 }
if(normalize_g == "mean")   { myobj_nor_g <- methylKit::normalizeCoverage(kept.myobj_g,  method = normalize_g); bool_normalize=bool_normalize+1 }
if(normalize_g == "median") { myobj_nor_g <- methylKit::normalizeCoverage(kept.myobj_g,  method = normalize_g); bool_normalize=bool_normalize+1 }
cat("\n\n")
print( paste("bool_normalize"         , bool_normalize,           sep=":  ") )  
cat("\n\n\n")   


 
myTempFunction_g <- function() {
	Part3_g3 = paste(Part3_g, "/Segmentation_Of_Each_Sample",  sep="") 
	if( ! file.exists(Part3_g3) ) { dir.create(Part3_g3, recursive = TRUE) }
	pdf( file=paste(Part3_g3, "Segmentation_diagnostic_plot.pdf", sep="/")  )
	for( i in c(1:length(myobj_g)) ) {
  		res_temp_1 = methylKit::methSeg( myobj_nor_g[[i]] , diagnostic.plot=TRUE, maxInt=100,  minSeg=10,  G=1:5)
   		file_name = ShortName_All_vector_g[i]   
   		methylKit::methSeg2bed(res_temp_1,   filename= paste(Part3_g3, "/", file_name,".bed", sep="") )
	}
	dev.off()    

	Part3_g4 = paste(Part3_g, "/Segmentation_Of_Each_Sample_Unrestricted",  sep="") 
	if( ! file.exists(Part3_g4) ) { dir.create(Part3_g4, recursive = TRUE) }  
	pdf( file=paste(Part3_g4, "Segmentation_diagnostic_plot.pdf", sep="/")  )
	for( i in c(1:length(myobj_g)) ) {
		 res_temp_1 = methylKit::methSeg( myobj_nor_g[[i]] , diagnostic.plot=TRUE, maxInt=100,  minSeg=10 )
		 file_name = ShortName_All_vector_g[i]   
  		 methylKit::methSeg2bed(res_temp_1,   filename= paste(Part3_g4, "/", file_name,".bed", sep="") )
	}
	dev.off()    
}
tryCatch(
    myTempFunction_g(),
    error = function(err){"myTempFunction_g_Segmentation_000123"}
)
 

################
cat("\n\n\n")
my_methylBase_CoverAll_g  = methylKit::unite( myobj_nor_g,  destrand=FALSE,   mc.cores=numCores_g   )   

sink( file=paste(Part3_g, "13A_methylBase-CoverAllSamples.dimension.txt", sep="/")  )
  print( dim(my_methylBase_CoverAll_g) ) 
sink()

file14_part3_g = paste(Part3_g, "13B_methylBase-CoverAllSamples.txt", sep="/")   
write.table( methylKit::getData(my_methylBase_CoverAll_g) ,  file =file14_part3_g, 
            append = FALSE, quote = FALSE, sep = "\t", eol = "\n", na = "NA", dec = ".", 
            row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"),  fileEncoding = "")

sink( file=paste(Part3_g, "13C_methylBase-CoverAllSamples.print.txt", sep="/")  )
    print( my_methylBase_CoverAll_g  )
sink()

file16_part3_g = paste(Part3_g, "13D_methylBase-CoverAllSamples.summary.txt", sep="/")   
write.table( summary(my_methylBase_CoverAll_g)  ,  file =file16_part3_g, 
             append = FALSE, quote = FALSE, sep = "\t", eol = "\n", na = "NA", dec = ".", 
             row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"),  fileEncoding = "")
rm(my_methylBase_CoverAll_g)
################




numberOfEachGroup = c( length( Files_one_1_g ) , length( Files_two_2_g  ),    length( Files_three_3_g ) , length( Files_four_4_g  ),  length( Files_five_5_g  ) , 
                       length( Files_six_6_g ) , length( Files_seven_7_g  ) , length( Files_eight_8_g ) , length( Files_nine_9_g  ) , length( Files_ten_10_g  )   )
numberOfEachGroup = numberOfEachGroup[numberOfEachGroup>0]  
print(  "numberOfEachGroup:"  )  
cat(numberOfEachGroup, sep = "\n")

my_methylBase_object_g = NA
if( numberCoveredSamples_g >= 1 ) {
    cat("\n\n\n")
    print( paste(numberCoveredSamples_g, "Samples must be covered in each group.", sep=" ") )
    cat("\n\n\n")
    my_methylBase_object_g  = methylKit::unite( myobj_nor_g,  destrand=FALSE,   mc.cores=numCores_g ,  min.per.group = as.integer(numberCoveredSamples_g)  )   
}else{
    cat("\n\n\n")
    print(  "All samples must be covered in each group."  )
    cat("\n\n\n")
    (numberCoveredSamples_g==0)  ||  stop("The value of numberCoveredSamples_g is wrong! ")
    my_methylBase_object_g  = methylKit::unite( myobj_nor_g,  destrand=FALSE,   mc.cores=numCores_g   )   
}


sink( file=paste(Part3_g, "14A_methylBase-object.dimension.txt", sep="/")  )
  print( dim(my_methylBase_object_g) ) 
sink()

file14_part3_g = paste(Part3_g, "14B_methylBase_object.txt", sep="/")   
write.table( methylKit::getData(my_methylBase_object_g) ,  file =file14_part3_g, 
            append = FALSE, quote = FALSE, sep = "\t", eol = "\n", na = "NA", dec = ".", 
            row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"),  fileEncoding = "")

sink( file=paste(Part3_g, "14C_methylBase-object.print.txt", sep="/")  )
    print( my_methylBase_object_g  )
sink()

file16_part3_g = paste(Part3_g, "14D_methylBase-object.summary.txt", sep="/")   
write.table( summary(my_methylBase_object_g)  ,  file =file16_part3_g, 
             append = FALSE, quote = FALSE, sep = "\t", eol = "\n", na = "NA", dec = ".", 
             row.names = FALSE,  col.names = TRUE, qmethod = c("escape", "double"),  fileEncoding = "")

rm(myobj_g)
rm(kept.myobj_g)
rm(removed.myobj_g1)
rm(myobj_nor_g)
sink() 
cat("End Part 3. \n\n\n\n\n")
##############################################################################################################################################################################################





## Part 4: Analyze some specific regions by methylKit ...
################################################################################
cat("Start Part 4: \n")
cat("    Analyze some specific regions by using methylKit ... \n\n")

sink(file = paste(myRunLog_g, "Part_4.runLog.txt", sep="/") )
Part11_g = paste(outDir_g, "/4_Specific_Regions",  sep="") 
if( ! file.exists(Part11_g) )    { dir.create(Part11_g,    recursive = TRUE) }

functionsByContext_1_g = ""
if(cytosineContext_g=="CpG") { 
       functionsByContext_1_g="14A_For-Each-Type.R"  
}else{
  functionsByContext_1_g="14B_For-Each-Type.R"  
}

source( paste(AbsolutePathOfFunctions_g, "5_Only-For-Figures.R", sep="/"                   )  )  
source( paste(AbsolutePathOfFunctions_g, "6_Violin-Box-Plots.R", sep="/"                   )  ) 
source( paste(AbsolutePathOfFunctions_g, "7_Heatmaps.R", sep="/"                           )  ) 
source( paste(AbsolutePathOfFunctions_g, "8_Statistical-Hypothesis-Testing.R", sep="/"     )  ) 
source( paste(AbsolutePathOfFunctions_g, "9_Correlation-Covariance-Matrices.R", sep="/"    )  )  
source( paste(AbsolutePathOfFunctions_g, "10_Hierarchical-Clustering-MethylKit.R", sep="/" )  )  
source( paste(AbsolutePathOfFunctions_g, "11_Hierarchical-Clustering-Hclust.R", sep="/"    )  ) 
source( paste(AbsolutePathOfFunctions_g, "12_PCA-MethylKit-Further-Prcomp.R", sep="/"      )  ) 
source( paste(AbsolutePathOfFunctions_g, "13_Multidimensional-Scaling.R", sep="/"          )  ) 
source( paste(AbsolutePathOfFunctions_g,  functionsByContext_1_g,  sep="/"                 )  ) 
source( paste(AbsolutePathOfFunctions_g, "21_DMCs-DMRs.R", sep="/"                         )  )
source( paste(AbsolutePathOfFunctions_g, "22_diffMe-select.R", sep="/"                     )  )
source( paste(AbsolutePathOfFunctions_g, "23_DMCs-DMRs-Annotation.R", sep="/"              )  )
source( paste(AbsolutePathOfFunctions_g, "27_Main-Function-for-speLoci.R", sep="/"         )  )
source( paste(AbsolutePathOfFunctions_g, "28_Compare-10groups-speLoci.R",    sep="/"       )  )

myCompare_10groups_speLoci_g(methylBase_temp_1=my_methylBase_object_g,   myPath_temp_1=Part11_g,    qvalue_temp_1=qvalue_g,    
	                     differenceOfMethylation_temp_1=differenceOfMethylation_g,  minBases_temp_1=minBasesSpecificRegions_g 
)                                              

sink() 
cat("End Part 4. \n\n\n\n\n")
################################################################################





